{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","url","blob","chunks","duration","h","m","s","getData","setGetData","className","record","title","audioURL","showUIAudio","handleAudioStop","data","console","log","handleAudioUpload","file","handleReset","mimeTypeToUseWhenRecording","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAe,I,2BC2DAA,MAnDf,WAEE,MAA8BC,mBAAS,CACrCC,IAAK,KACLC,KAAM,KACNC,OAAQ,KACRC,SAAU,CACRC,EAAG,KACHC,EAAG,KACHC,EAAG,QAPP,mBAAOC,EAAP,KAAgBC,EAAhB,KAiCA,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CACEC,QAAQ,EACRC,MAAO,kBACPC,SAAUL,EAAQP,IAClBa,aAAW,EACXC,gBAAiB,SAAAC,GAAI,OA7BH,SAACA,GACvBC,QAAQC,IAAIF,GACZP,EAAWO,GA2BkBD,CAAgBC,IACzCG,kBAAmB,SAAAH,GAAI,OAzBFI,EAyBwBJ,OAxBjDC,QAAQC,IAAIE,GADY,IAACA,GA0BrBC,YAtBc,WAClBZ,EAAW,CACTR,IAAK,KACLC,KAAM,KACNC,OAAQ,KACRC,SAAU,CACRC,EAAG,KACHC,EAAG,KACHC,EAAG,SAeHe,2BAA0B,kBCzCnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.692382e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Recorder} from 'react-voice-recorder';\nimport 'react-voice-recorder/dist/index.css';\n\nfunction App() {\n\n  const [getData, setGetData] = useState({\n    url: null,\n    blob: null,\n    chunks: null,\n    duration: {\n      h: null,\n      m: null,\n      s: null,\n    }\n  })\n\n  const handleAudioStop = (data) => {\n    console.log(data)\n    setGetData(data);\n  }\n\n  const handleAudioUpload = (file) => {\n    console.log(file);\n  }\n\n  const handleReset = () => {\n    setGetData({\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: null,\n        m: null,\n        s: null,\n      }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Recorder\n        record={true}\n        title={\"Audio Recording\"}\n        audioURL={getData.url}\n        showUIAudio\n        handleAudioStop={data => handleAudioStop(data)}\n        handleAudioUpload={data => handleAudioUpload(data)}\n        handleReset={handleReset}\n        mimeTypeToUseWhenRecording={`audio/webm`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}